// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bongodb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BongoDBClient is the client API for BongoDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BongoDBClient interface {
	Set(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ValueResponse, error)
	Delete(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Truncate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bongoDBClient struct {
	cc grpc.ClientConnInterface
}

func NewBongoDBClient(cc grpc.ClientConnInterface) BongoDBClient {
	return &bongoDBClient{cc}
}

func (c *bongoDBClient) Set(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bongodb.BongoDB/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bongoDBClient) Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ValueResponse, error) {
	out := new(ValueResponse)
	err := c.cc.Invoke(ctx, "/bongodb.BongoDB/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bongoDBClient) Delete(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bongodb.BongoDB/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bongoDBClient) Truncate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bongodb.BongoDB/Truncate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BongoDBServer is the server API for BongoDB service.
// All implementations must embed UnimplementedBongoDBServer
// for forward compatibility
type BongoDBServer interface {
	Set(context.Context, *KeyValueRequest) (*emptypb.Empty, error)
	Get(context.Context, *KeyRequest) (*ValueResponse, error)
	Delete(context.Context, *KeyRequest) (*emptypb.Empty, error)
	Truncate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedBongoDBServer()
}

// UnimplementedBongoDBServer must be embedded to have forward compatible implementations.
type UnimplementedBongoDBServer struct {
}

func (UnimplementedBongoDBServer) Set(context.Context, *KeyValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedBongoDBServer) Get(context.Context, *KeyRequest) (*ValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBongoDBServer) Delete(context.Context, *KeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBongoDBServer) Truncate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedBongoDBServer) mustEmbedUnimplementedBongoDBServer() {}

// UnsafeBongoDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BongoDBServer will
// result in compilation errors.
type UnsafeBongoDBServer interface {
	mustEmbedUnimplementedBongoDBServer()
}

func RegisterBongoDBServer(s grpc.ServiceRegistrar, srv BongoDBServer) {
	s.RegisterService(&BongoDB_ServiceDesc, srv)
}

func _BongoDB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BongoDBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bongodb.BongoDB/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BongoDBServer).Set(ctx, req.(*KeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BongoDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BongoDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bongodb.BongoDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BongoDBServer).Get(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BongoDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BongoDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bongodb.BongoDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BongoDBServer).Delete(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BongoDB_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BongoDBServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bongodb.BongoDB/Truncate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BongoDBServer).Truncate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BongoDB_ServiceDesc is the grpc.ServiceDesc for BongoDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BongoDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bongodb.BongoDB",
	HandlerType: (*BongoDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _BongoDB_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BongoDB_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BongoDB_Delete_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _BongoDB_Truncate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bongodb.proto",
}
